@use "sass:math";

//---------------------
// Grid mixins
//---------------------
// For exporting all the grid code
@mixin ontario-exports($name) {
    // Import from global scope
    $modules: $modules !global;

    // Check if a module is already on the list
    $module_index: index($modules, $name);
    @if (($module_index == null) or ($module_index == false)) {
        $modules: append($modules, $name) !global;
        @content;
    }
}

// ontario-clearfix mixin
// We use this to clear floats
@mixin ontario-clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }

    &:after {
        clear: both;
    }
}

// Grid row mixin
// For creating container, nested, and collapsed rows.
// $behaviour - Any special behaviour for this row?
//Default: false.
//Options: nest, collapse, nest-collapse, false.
@mixin ontario-grid-row($behaviour: false) {
    // use @include ontario-grid-row(nest); to include a nested row
    @if $behaviour == nest {
        margin: 0 math.div(-$column-gutter, 2);
        max-width: none;
        width: auto;
    }

    // use @include ontario-grid-row(collapse); to collapsed a container row margins
    @else if $behaviour == collapse {
        margin: 0;
        max-width: $row-width;
        width: $full-width;
    }

    // use @include ontario-grid-row(nest-collapse); to collapse outer margins on a nested row
    @else if $behaviour == nest-collapse {
        margin: 0;
        max-width: none;
        width: auto;
    }

    // use @include ontario-grid-row; to use a container row
    @else {
        margin: 0 auto;
        max-width: $row-width;
        width: $full-width;
    }

    // ontario-clearfix for all rows
    @include ontario-clearfix();
}

// Grid column mixin
// Creates a column, should be used inside of a media query to control layouts
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin ontario-grid-column(
    $columns: false,
    $last-column: false,
    $center: false,
    $offset: false,
    $push: false,
    $pull: false,
    $collapse: false,
    $float: true,
    $position: false
) {
    // If positioned for default .column, include relative position
    // push and pull require position set
    @if $position or $push or $pull {
        position: relative;
    }

    // If collapsed, get rid of gutter padding
    @if $collapse {
        padding-left: 0;
        padding-right: 0;
    }

    // Gutter padding whenever a column isn't set to collapse
    // (use $collapse:null to do nothing)
    @else if $collapse == false {
        padding-left: math.div($column-gutter, 2);
        padding-right: math.div($column-gutter, 2);
        box-sizing: border-box;
    }

    // If a column number is given, calculate width
    @if $columns {
        width: ontario-grid-calc($columns, $total-columns);

        // If last column, float naturally instead of to the right
        @if $last-column {
            float: $opposite-direction;
        }
    }

    // Source Ordering, adds left/right depending on which you use.
    @if $push {
        #{$default-float}: ontario-grid-calc($push, $total-columns);
        #{$opposite-direction}: auto;
    }
    @if $pull {
        #{$opposite-direction}: ontario-grid-calc($pull, $total-columns);
        #{$default-float}: auto;
    }

    @if $float and $last-column == false {
        @if $float == left or $float == true {
            float: $default-float;
        } @else if $float == right {
            float: $opposite-direction;
        } @else {
            float: none;
        }
    }

    // If centered, get rid of float and add appropriate margins
    @if $center {
        margin-#{$default-float}: auto;
        margin-#{$opposite-direction}: auto;
        float: none;
    }

    // If offset, calculate appropriate margins
    @if $offset {
        margin-#{$default-float}: ontario-grid-calc(
            $offset,
            $total-columns
        ) !important;
    }
}

// Ontario grid html classes mixin
// Create presentational classes for grid
// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
@mixin ontario-grid-html-classes($size) {
    @for $i from 0 through $total-columns - 1 {
        .ontario-#{$size}-push-#{$i} {
            @include ontario-grid-column(
                $push: $i,
                $collapse: null,
                $float: false
            );
        }

        .ontario-#{$size}-pull-#{$i} {
            @include ontario-grid-column(
                $pull: $i,
                $collapse: null,
                $float: false
            );
        }
    }

    .ontario-column,
    .ontario-columns {
        @include ontario-grid-column($columns: false, $position: true);
    }

    @for $i from 1 through $total-columns {
        .ontario-#{$size}-#{$i} {
            @include ontario-grid-column(
                $columns: $i,
                $collapse: null,
                $float: false
            );
        }
    }

    @for $i from 0 through $total-columns - 1 {
        .ontario-#{$size}-offset-#{$i} {
            @include ontario-grid-column(
                $offset: $i,
                $collapse: null,
                $float: false
            );
        }
    }

    .ontario-#{$size}-reset-order {
        float: $default-float;
        left: auto;
        margin-#{$default-float}: 0;
        margin-#{$opposite-direction}: 0;
        right: auto;
    }

    .ontario-column.ontario-#{$size}-centered,
    .ontario-columns.ontario-#{$size}-centered {
        @include ontario-grid-column(
            $center: true,
            $collapse: null,
            $float: false
        );
    }

    .ontario-column.ontario-#{$size}-uncentered,
    .ontario-columns.ontario-#{$size}-uncentered {
        float: $default-float;
        margin-#{$default-float}: 0;
        margin-#{$opposite-direction}: 0;
    }

    // Fighting [class*="ontario-column"] + [class*="ontario-column"]:last-child
    .ontario-column.ontario-#{$size}-centered:last-child,
    .ontario-columns.ontario-#{$size}-centered:last-child {
        float: none;
    }

    // Fighting ontario-.column.<previous-size>-centered:last-child
    .ontario-column.ontario-#{$size}-uncentered:last-child,
    .ontario-columns.ontario-#{$size}-uncentered:last-child {
        float: $default-float;
    }

    .ontario-column.ontario-#{$size}-uncentered.ontario-opposite,
    .ontario-columns.ontario-#{$size}-uncentered.ontario-opposite {
        float: $opposite-direction;
    }

    .ontario-row {
        &.ontario-#{$size}-collapse {
            > .ontario-column,
            > .ontario-columns {
                @include ontario-grid-column($collapse: true, $float: false);
            }

            .ontario-row {
                margin-left: 0;
                margin-right: 0;
            }
        }
        &.ontario-#{$size}-uncollapse {
            > .ontario-column,
            > .ontario-columns {
                @include ontario-grid-column;
            }
        }
    }
}
