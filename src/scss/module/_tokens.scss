@use "settings/settings" as *;
@use "function/utils" as *;
@use "map" as *;
@use "sass:map";
@use "sass:list";
@use "sass:string";


//  Dans la structure ci-dessous, les valeurs de type « liste » — par exemple « font family open-sans » qui est
//  la liste (font, family, opens-sans)  — sont des raccourcis vers une autre clé.
//  Ex:
//  {
//    foo: (
//      bar: baz, /* donnera le token --qc-foo-bar : baz; */
//      biz: foo bar, /* donnera le token --qc-foo-biz : baz;  */
//    ),
//    /* autre écriture possible, pour ceux qui préfèrent les parenthèses */
//    buz: (foo,bar), /* --qc-buz: baz */
//    /* raccourci vers un raccourci */
//    bouz: (foo, biz), /* --qc-bouz : baz; */
//  }
//  cf le mixin generate-tokens() pour comprendre le mécanisme,

$xl-settings: (
    font : (
        family : (
            roboto: google-font(roboto),
            open-sans: google-font(open-sans),
            roboto-mono: google-font(roboto-mono),
            content: font family open-sans, // le token généré sera --qc-font-family-content : Open Sans, sans-serif;
            header: font family roboto,
            code: font family roboto-mono,
        ),
        size: (
            h6: rem(16),
            h5: rem(19),
            h4: rem(21),
            h3: rem(28),
            h2: rem(36),
            h1: rem(48),
            90: rem(14),
            100: rem(16),
            120: rem(18),
            200: rem(20),
            300: rem(31),
            sm : font size 90,
            md: font size 100,
            lg: font size 120,
            xl: font size 200,
            xxl: font size 300,
            content: font size md,
        ),
        weight : (
            regular : 400,
            medium : 500,
            semi-bold : 600,
            bold : 700,
            header : (
                regular : font weight regular,
                medium : font weight semi-bold,
                bold : font weight bold,
            ),
            content : (
                regular : font weight regular,
                medium : font weight medium,
                bold : font weight bold,
            ),
        ),
    ),
    line-height :(
        h6: rem(20),
        h5: rem(24),
        h4: rem(24),
        h3: rem(32),
        h2: rem(40),
        h1: rem(56),
        90: rem(20),
        100: rem(24),
        120: rem(28),
        200: rem(32),
        300: rem(48),
        sm : line-height 90,
        md: line-height 100,
        lg: line-height 120,
        xl: line-height 200,
        xxl: line-height 300,
        content: line-height md,
    ),
    color: (
        white : white,
        blue : (
            pale : #dae6f0,
            light : #4a98d9,
            regular : #1479cc,
            piv: #095797,
            medium : #19406C,
            dark: #223654,
        ),
        purple: #6b4fa1,
        grey : (
            pale : #f1f1f2,
            light : #c5cad2,
            regular: #8893a2,
            medium : #6b778a,
            dark: #4e5662,
        ),
        pink : (
            pale: #ffdbd6,
            regular: #e58271,
        ),
        red: (
            regular: #cb381f,
            dark: #692519,
        ),
        green: (
            pale: #d7f0bb,
            regular: #4f813d,
            dark: #2c4024,
        ),
        yellow : (
            pale : #f8e69a,
            regular: #e0ad03,
            dark: #ad781c,
        ),
        text : (
            primary : color blue dark,
        ),
        accent: color pink regular,
        success: color green regular,
        error: color red regular,
        danger: color red dark,
        link: (
            text: color blue piv,
            hover: color blue piv,
            visited: color purple,
            active: color red regular,
        ),
    ),
    box-shadow: (
        rgba-color : color blue dark,
        rgba-gradient: .24,
        blur: (
            0: 0,
            1: 4px,
            2: 8px,
            3: 16px,
            4: 24px,
        ),
    ),
    spacer: (
        sm: rem(2 * $base-spacer),
        md: rem(3 * $base-spacer),
        lg: rem(6 * $base-spacer),
        xl: rem(12 * $base-spacer),
    ),
    grid: (
        gutter: 32px,
        breakpoint: (
            xs: 0,
            sm: 576px,
            md: 768px,
            lg: 992px,
            xl: 1140px,
        ),
        container-max-width: (
            sm: grid breakpoint sm,
            md: grid breakpoint md,
            lg: grid breakpoint lg,
            xl: grid breakpoint xl,
        )
    )
) !default;

$breakpoints-settings: (
    xl : $xl-settings,
    sm : (
        font-size: (
            h3: rem(25),
            h2: rem(28),
            h1: rem(36),
        ),
        line-height: (
            h2: rem(32),
            h1: rem(40),
        )
    ),
) !default;


// functions

// Return css var corresponding to this token
// token-value("foo","bar"); // var(--qc-foo-bar);
@function token-value($args...) {
  $sass-value: map-deep-get($xl-settings, $args...);
  @if $sass-value == null {
    @error unexistant token in map xl-settings for path $args;
  }
  @return var(#{token-name($args...)});
}

// Return css var name corresponding to this token
// token-name("foo","bar"); // --qc-foo-bar;
@function token-name($args...) {
  $token: --qc;
  @each $arg in $args {
    $token: #{$token}-#{$arg};
  }
  @return $token;
}




