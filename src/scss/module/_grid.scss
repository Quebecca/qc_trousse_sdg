@use "tokens" as *;
@use "map" as *;
@use "sass:map";

@import "bootstrap";
//@forward "bootstrap" show $grid-breakpoints,$grid-gutter-width,$container-max-widths;
$enable-deprecation-messages : false;
$grid-breakpoints: map.get($xl-tokens, grid, breakpoint);
$grid-gutter-width: map.get($xl-tokens, grid, gutter);
$container-max-widths: ();
@each $size, $val in map.keys(map.get($xl-tokens, grid , container-max-width)) {
  $container-max-widths: map.set($container-max-widths, $size, map.get($xl-tokens, grid ,container-max-width ,$size))
}

@import "bootstrap/scss/mixins/breakpoints";
@import "bootstrap/scss/mixins/grid";
@import "bootstrap/scss/mixins/deprecate";

@mixin media-tablet() {
  @include media-breakpoint-down(md) {
    @content;
  }
}

@mixin media-mobile() {
  @include media-breakpoint-down(xs) {
    @content;
  }
}

// Framework grid generation
//
// Copié sur bootstrap avec ajout de l’espace de nom « qc- » aux classes
// bootstrap _grid-framework copy, with "qc-" prefix added to classes

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: $gutter * .5;
    padding-left: $gutter * .5;
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .qc-col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .qc-col#{$infix},
    .qc-col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.qc-col-{bp}` classes for equal-width flexbox columns
      .qc-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .qc-row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .qc-col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .qc-col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      .qc-order#{$infix}-first { order: -1; }

      .qc-order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .qc-order#{$infix}-#{$i} { order: $i; }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix == "" and $i == 0) { // Avoid emitting useless .qc-offset-0
            .qc-offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}
