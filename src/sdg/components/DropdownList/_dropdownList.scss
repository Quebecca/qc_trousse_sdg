@use "../../scss/qc-sdg-lib" as *;
@use "sass:math";

$min-height: 40;
$max-height: 370;
$border: 1;

.qc-dropdown-list {
  position: relative;
  border: rem($border) solid token-value(color, grey, medium);
  min-height: rem($min-height);
  background-color: token-value(color, background);

  &.qc-dropdown-list-invalid {
    border: rem(2) solid token-value(color, red, regular) !important;
  }

  &-sm { max-width: token-value(spacer, input, sm); }
  &-md { max-width: token-value(spacer, input, md); }
  &-lg { max-width: token-value(spacer, input, lg); }
  &-xl { max-width: token-value(spacer, input, xl); }
  &-xxl { max-width: token-value(spacer, input, xxl); }
}

.qc-dropdown-list-search {
  margin: token-value(spacer, xs);

  * {
    z-index: 12 !important;
  }
}

.qc-dropdown-list-no-options {
  margin-left: token-value(spacer, xs);
  margin-right: token-value(spacer, xs);
}

.qc-dropdown-button {
  display: flex;
  width: 100%;
  justify-content: space-between;
  height: rem($min-height);
  align-items: center;
  background-color: token-value(color, background);
  border: none;
  padding-left: token-value(spacer, xs);
  padding-right: token-value(spacer, xs);
  gap: token-value(spacer, xs);

  @include qc-formcontrol-box();
  @include content-font(md);

  &:hover {
    cursor: pointer;
  }

  &:disabled {
    cursor: not-allowed;

    &::before {
      background-color: token-value(color, grey, pale);
    }
  }
}

.qc-dropdown-text {
  display: flex;
  justify-items: start;
  overflow: hidden;
}

.qc-dropdown-button-icon {
  align-items: center;
  rotate: 180deg;
}

.qc-dropdown-button-icon-expanded {
  transform: rotate(180deg);
}

%dropdown-placeholder-text {
  display: block;
  justify-content: start;
  width: 100%;
  min-width: 0;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

.qc-dropdown-placeholder {
  @extend %dropdown-placeholder-text;
  color: token-value(color, grey, medium);
}

.qc-dropdown-choice {
  @extend %dropdown-placeholder-text;
  color: token-value(color, blue, dark);
}

.qc-dropdown-list-expanded {
  position: absolute;
  width: calc(100% + 2px);
  left: -(rem($border));
  right: -(rem($border));
  top: 100%;
  z-index: 11; // Index supérieur à l'index du mixin qc-formcontrol-box


  background-color: token-value(color, background);
  border-left: rem($border) solid token-value(color, grey, medium);
  border-right: rem($border) solid token-value(color, grey, medium);
  border-bottom: rem($border) solid token-value(color, grey, medium);
}

.qc-dropdown-list-hidden {
  display: none;
}

.qc-dropdown-list-items {
  max-height: var(--dropdown-items-height);
  overflow-y: auto;
  overflow-x: hidden;

  &::-webkit-scrollbar {
    width: token-value(spacer, xs);
    margin-left: token-value(spacer, xs);
    margin-right: token-value(spacer, xs);
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background: token-value(color, blue, piv);
    border-radius: rem(4);

    border: none;
  }

  @supports not selector(::-webkit-scrollbar) {
    scrollbar-color: token-value(color, blue, piv) transparent;
    scrollbar-width: thin;
  }

  * {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
}

.qc-dropdown-list-multiple, .qc-dropdown-list-single {
  display: flex;
  align-items: center;
  height: rem($min-height);

  &:hover{
    background-color: token-value(color, blue, pale);
    outline: none;
    cursor: pointer;
  }

  &:focus, &:has(input[type=checkbox]:focus) {
    outline: rem(2) solid token-value(color, blue, light);
    outline-offset: -(rem(2));
  }
}

.qc-dropdown-list-single {
  padding-left: token-value(spacer, xs);
  padding-right: token-value(spacer, xs);
}

.qc-dropdown-list-multiple {
  label {
    padding-left: token-value(spacer, xs);
    padding-right: token-value(spacer, xs);

    flex-grow: 1;
    justify-items: center;
    align-items: center;
  }

  .qc-check-row {
    height: 100%;
  }
}

.qc-dropdown-list-single-selected {
  background-color: token-value(color, blue, regular) !important;
  color: token-value(color, white);
}
