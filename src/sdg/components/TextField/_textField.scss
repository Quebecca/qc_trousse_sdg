@use "qc-sdg-lib" as *;

qc-textfield,
.qc-textfield {
  display: block;
  margin-bottom: rem(32);

  .qc-description {
    @include content-font(sm);
    color: token-value(color blue dark);
    &:has(~ :disabled) {
      color: token-value(color, grey, regular);
    }
  }
}

@mixin size() {
  [size=sm] > & { max-width: rem(63); }
  [size=md] > & { max-width: rem(156); }
  [size=lg] > & { max-width: rem(249); }
  [size=xl] > & { max-width: rem(528); }
  [size=xxl] > & { max-width: rem(825); }
}

input,
textarea,
.qc-textfield-charcount {
  @include size();
}

input,
textarea {
  .qc-textfield &,
  qc-textfield & {
    display: block;
    width: 100%;
    position: relative;
    color: token-value(color text primary);
    padding: rem(8);
    text-overflow: ellipsis;
    overflow: hidden;
    margin-top: rem(4);
    border: 1px solid token-value(color formfield border);

    &::placeholder {
      color: token-value(color grey medium);
      font-weight: normal;
    }

    &:focus,
    &:focus-visible {
      outline: 2px solid token-value(color formfield focus outline);
      border: 2px solid token-value(color formfield focus border);
      padding: rem(7);
      &::placeholder {
        //color: transparent;
      }
    }

    &:disabled {
      cursor: not-allowed;
      background-color: token-value(color grey pale);
      border: 1px solid token-value(color, grey, regular);
    }
  }

  [invalid] > & {
    border-color: token-value(color, red, regular);
    border-width: 2px;
    padding: rem(7);
  }

}

textarea {
  .qc-textfield &,
  qc-textfield & {
    min-height: rem(108);
    resize: vertical;
  }
}

.qc-description {
  font-size: token-value(font, size, sm);
  color: token-value(color blue dark);
  line-height: rem(20);
}

.qc-textfield-charcount {
  @include content-font(sm);
  text-align: right;
  margin-top: rem(4);
  color: token-value(color blue dark);
  &.qc-max-reached {
    color: token-value(color, red, regular);
    font-weight: token-value(font weight content bold);
  }
}



